<?xml version="1.0"?>
<launch>
    <arg name="networking" default="true"/>
    <arg name="health" default="true"/>
    <arg name="voice" default="false"/>
    <arg name="pose" default="true"/>
    <arg name="visualize_pose" default="false"/>
    <arg name="obstacle_detection" default="true"/>
    <arg name="lidar" default="true"/>
    <arg name="use_front_camera" default="true"/>


    <!--<include file="$(find cart_endpoints)/launch/zed.launch"/> -->

       <!-- Start lidar code -->
    <group if="$(arg lidar)">
        <remap from="/scan" to="/scan_velodyne"/>
        <!--<remap from="/velodyne_points" to="/cloud_in"/>-->
        <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch"/>
        <!-- <node name="gps_node" pkg="cart_endpoints" type="gps_node.py" output="screen"/> -->
   </group> 
      
    <group>
        <node name="motor_endpoint" pkg="cart_endpoints" type="motor_endpoint.py" output="screen"/>
    </group>
    <group if="$(arg health)">
        <node name="cart_health_monitor" pkg="cart_endpoints" type="cart_health_monitor.py" output="screen"/>
    </group>
    <group if="$(arg networking)">
        <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch">
            <arg name="port" value="9090"/>
        </include>
    </group>
    <!--<group if="$(arg pose)">
        <node name="pose_tracking" pkg="cart_endpoints" type="pose_start.sh"/>
    </group> -->
    <group if="$(arg obstacle_detection)">
   
      <node name="pointcloud_to_laserscan_node" pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" args="cloud_in:=/velodyne_points scan:=/pcd_to_scan" output="screen">
        <param name="min_height" type="double" value="-1.0" />
        <param name="max_height" type="double" value="0" />
        <param name="range_min" type="double" value="0.8" />
      </node>

        <node name="obstacle_detector" pkg="cart_endpoints" type="obstacle_detector.py" output="screen"/>
        <node name="collision_detector" pkg="cart_planning" type="collision_detector.py" output="screen"/>
    </group>
    <group if="$(arg use_front_camera)">
  <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >
    <param name="video_device" value="/dev/v4l/by-id/usb-HD_USB_Camera_HD_USB_Camera-video-index0" />
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="usb_cam" />
    <param name="io_method" value="mmap"/>
    <param name="camera_name" value="front_facing"/> <!-- not working becuase wants calib file-->
  </node>
</group>
  
</launch>
