<?xml version="1.0" ?>
<launch>
  <!-- Load the TortoiseBot URDF model into the parameter server -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find cart_simulator)/testing_description/urdf/4_point_model.urdf.xacro'" />
  <param name="localizer" value="velodyne"/>
  <param name="tf_x" type="double" value="0.0"/>
  <param name="tf_y" type="double" value="0.0"/>
  <param name="tf_z" type="double" value="1.25"/>
  <param name="tf_yaw" type="double" value="0.0"/>
  <param name="tf_pitch" type="double" value="0.0"/>
  <param name="tf_roll" type="double" value="0.0"/>

   <!-- Launch Gazebo or not, should be launched when not getting lidar
       data from a bag file or real life 
       (Use cart_control->navigation_localization.launch for real world
       or bag use.)-->
  <arg name="gazebo" default="false"/>
  <arg name="lidar" default="true"/>
  <arg name="use_sim_time" default="false"/>
  <param name="use_sim_time" type="bool" value="$(arg use_sim_time)"/>
  
  <!-- Location of Point Cloud Map file -->
  <arg name="map_arg" default="$(env HOME)/AVData/speedBoiMap.pcd"/>

  <group>
      <!-- Start Gazebo with an empty world -->
      <group if="$(arg gazebo)">
        <include file="$(find cart_simulator)/launch/empty_world.launch"/>
          <!-- Spawn a TortoiseBot in Gazebo, taking the description from the
               parameter server -->
          <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
                args="-param robot_description -urdf -model tortoisebot -z 1.2" />
      </group>
      
      <!-- Launch Autoware's Runtime Manager and setup the transforms for localization -->
      <include file="$(find runtime_manager)/launch_files/setup_tf.launch">
          <arg name="frame_id" value="/base_link"/>
          <arg name="child_frame_id" value="/velodyne"/>
      </include>
      
      <!-- Launch the map generator -->
      <include file="$(find map_tf_generator)/launch/map_tf_generate.launch"/>
      
      <!-- Launch points downsampler using voxel grid filter -->
      <include file="$(find points_downsampler)/launch/points_downsample.launch">
          <arg name="node_name" value="voxel_grid_filter"/>
          <arg name="points_topic" value="/points_raw"/>
      </include>
      
      <!-- Expose estimated localization pose and twist messages -->
      <include file="$(find autoware_connector)/launch/vel_pose_connect.launch">
        <arg name="topic_pose_stamped" value="/ndt_pose"/>
        <arg name="topic_twist_stamped" value="/ndt_twist"/>
      </include>
      
      <!-- Launch the NDT Matching algorithm for localization -->
      <include file="$(find lidar_localizer)/launch/ndt_matching.launch"/>
            
			<!-- Load a pointcloud map. Related Topics: /points_map -->
      <node name="pointcloud_map" pkg="map_file" type="points_map_loader"
            args="noupdate $(arg map_arg)"/>
            
      <node name="robot_state_publisher" pkg="robot_state_publisher"
            type="robot_state_publisher"/>
     
            
     <!-- Joint State Publisher -->
     <node name="joint_state_publisher" pkg="joint_state_publisher"
            type="joint_state_publisher"/>
            
     <node name="vel_angle_to_twist" pkg="cart_simulator" type="vel_angle_to_twist.py"/> 
      
     <node type="rviz" name="rviz" pkg="rviz" args="-d $(find cart_simulator)/testing_description/rviz/autoware_integration.rviz" />

    <!-- Relay node, this is a temporary alternative to remapping the velodyne_points topic -->
    <node name="relay" pkg="topic_tools" type="relay" args="/velodyne_points /points_raw"/>

    <!-- Throttle position messages so nodes that need positional updates dont't call to often -->
    <node name="throttle" pkg="topic_tools" type="throttle" args="messages /ndt_pose 60.0 /limited_pose"/>
</group>
</launch>